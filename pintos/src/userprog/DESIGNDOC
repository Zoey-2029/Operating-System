		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jizhen Wang <jzwang43@stanford.edu>
Bowen Tan <tanbowen@@stanford.edu>
Ziyue Xiao <ziyuex@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No data structures decalred or modified when dealing with argument 
passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We pass the file_name as an argument to setup_arguments_in_stack(char *) 
we created to deal with argument passing. 

(1) First we made a copy of file_name*, use strtok_r() to tokenize the 
file_name string, for each token, we push it to the stack right away, 
update argc and record the address of arguments on the stack in 
variable argv_pointers.

(*note: when we copy file_name, we call palloc_get_page(). We record 
the virtual address in variable to_free, and free the page when 
setup_arguments_in_stack() finishs )

(2) After we push all the tokens in the stack, round the stack pointer 
down to a multiple of 4 if neccessary, and push a sentinel null 
pointer before going to next step.

(3) Then push the address of those tokens to the stack. Note in 
step (2) we push the tokens from left to right, here we have to push 
the addresses stored in argv_pointers in reverse order. 

(4) Push argv (address of argv[0]) and args to stack.

(5) Push a fake return address. Set the stack pointer (esp) to the 
address of this fake return address.

Diagram of stack for command line "/bin/ls -l foo bar" looks like this:

-------------------------------------------------
Address		Name			Data		Type	
0xbffffff8	argv[0][...]	/bin/ls\0	char[8]
0xbffffff5	argv[1][...]	-l\0		char[3]
0xbffffff1	argv[2][...]	foo\0		char[4]
0xbfffffed	argv[3][...]	bar\0		char[4]
0xbfffffec	word-align		0			uint8_t
0xbfffffe8	argv[4]			0			char *
0xbfffffe4	argv[3]			0xbfffffed	char *
0xbfffffe0	argv[2]			0xbffffff1	char *
0xbfffffdc	argv[1]			0xbffffff5	char *
0xbfffffd8	argv[0]			0xbffffff8	char *
0xbfffffd4	argv			0xbfffffd8	char **
0xbfffffd0	argc			4			int
0xbfffffcc	return address	0			void (*) ()
--------------------------------------------------

Before we create a new thread for user program, we check the 
length of command line arguments, makes sure those arguments 
would fit into a single page (4kB). If not, it is impossible 
to create the user thread. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is more thread safe. Because in strtok_r() we provide the 
argument saveptr. If we don't pass the extra saveptr, other threads 
mightget control and also call strtok_r(), pointers inside strtok_r() 
may be modified, when the original thread regains control it would 
pick up where last thread left off. So saveptr makes strtok_r() 
reentrant and more thread-safe.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

(1) If shell handles the job of separation, the kernel code can be 
simpler and cleaner.

(2) This will also allow shell to do some sanity check before it 
actually passed the arguments to kernel, for example, if the command 
line is super long, it may cause some problem in kernel, and this 
problem can be avoided if we catch it in the shell program. So shell 
provides some kind of protection for kernel.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
{
#ifdef USERPROG
/* Owned by userprog/process.c. */
uint32_t *pagedir;                  /* Page directory. */
struct thread *parent;              /* Parent process. */ 
struct list child_processes;        /* List of child processes. */
struct list file_info_list;         /* List of files opened. */
struct semaphore sema_wait;         /* Wait between parent 
										and child process. */
struct semaphore sema_exec;         /* Execute between parent 
										and child process. */
struct file *exec_file;             /* Executable file. */
int fd_count;
#endif
};

1. pagedir: points to the page directory
2. parent: points to the parent thread, if any
3. child_processes: list of child processes
4. file_info_list: list of opened files
5. sema_wait: semaphore used to sync the parent and child process in sys_wait
6. sema_exec: semaphore used to sync the parent and child process in sys_exec
7. exec_file: points to the executable file
8. fd_count: track the number of opened files (Please double check)

struct thread_info {
    int tid;
    bool load_status;
    int exit_status;                    /* Exit status of thread */
    struct list_elem elem;              /* List element for child_processes */
};

Basically, this struct is used for parent to retrive its children's info
even after the child has exited

1. tid: the thread ID of the thread
2. load_status: used to indicate if the user thread was loaded successfully
3. exit_status: track the exit status of the thread
4. elem: list element for the child_process defined inside struct thread 

/* file_info struct keeps track of the opened file and its fd. */
struct file_info
{
  int fd;
  struct list_elem elem;
  struct file *file;
};

/* Lock to make sure only one process can interact with filesys. */
static struct lock filesys_lock;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

1. File descriptors (fd) and open files (*file) are both members of the 
file_info struct. When a file is opened, the program creates a
file_info struct and inserts it to the file_info_list of the thread.
With this design, given a fd, to find a file associated, we just need
to check the list and see if there exists a file_info struct that has
the same fd and returns the *file store in this struct.

2. File descriptors are unique within a single process. Common Unix 
system implements per-process file descriptor table so we implement 
our file descriptors in the similar way.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

1. Becasue a therad would be destroyed when it exited, we implement the 
"thread_info" struct to save the necessary info that could be used
after thread exiting, such as exit status and tid.

2. For the main body of the sys_wait, the parent checks if the input tid
is a valid child, and return -1 if not. Otherwise, it'll  wait on semaphore 
"sema_wait". 

3. As the child thread exits, it signals the parent to stop waiting when 
exiting/terminating. Once parent woke up, it checks the exit_status of the 
child, and remove/free the child from child_processes.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

1. Our design first check memory validity using "check_memory_validity"
function. If any address is invalid, we call "sys_exit" to exit. 
For example, if a program tries to write to 0x10123420,
which is not a valid user memory location, the check_memory_validity will 
fail and the program exit with status -1.

2. Then in sys_exit, whenever we try to exit, "free_file_info" and 
"free_child_processes_info" are called to make sure dynamically allocated
resources are freed. 

3. If error still happens, we modified exception.c so that if a user program
causes the exception, e.g. dereferencing NULL, it goes to sys_exit(-1), so 
the system does not crash and we can proceed to free the allocated resources.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

1. As addressed above, we ha a semaphore "sema_exec" to sync parent and
child threads. Ih the sys_exec function, after parent therad send the 
child to execute, it'll pull down the "sema_exec". Once the child thread 
failed loading (terminated) or finished executing successfully, it'll 
signal its parent to stop waiting by rising the "sema_exec". 

2. Additionally, having mentioned above, we implemented a "thread_info"
struct to hold the necessary information in case a therad exits. There,
a member "load_status" is used to track if the user therad is created or
loaded successfully, and once the parent waken up, it can check this 
struct member for the status of loading

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

1. As talked above, when P starts to wait for C, it "sema_down" the 
"sema_wait". Once child C finishes executing, it "sema_up" the "sema_
wait" so P stops waiting.

2. At the beginning of wait, the parent would find the child process
based on its pid. If C has already exited, the parent then no longer
holds C's info. So P will not wait for C.

3. At the end of sys_wait, if the child thread executed successfully,
the parent then frees resources allocated for the child thread. Also,
when the sys_exit has been called, at the end all the child processes
will be destroyed and cleared

4. In our design, if P terminates before C exits, it'll destroy C and 
free C's resources

5. When P terminates after C exits, P does not wait for C any more, so
just P terminates normally

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We choose the first method to access user memory, which is to verify 
the validity of a user-provided pointer, then dereference it. This method 
is streaghtforward, and doesn't require assembly code, which makes
the code more readable. And it is simpler because we can just make use of 
the functions provided by userprog/pagedir.c and threads/vaddr.h.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

1. In our design, the process does not reuse file descriptors if a file is
closed. 
The advantage is that it's very easy to assign new file 
descriptors without having to go back and find available fds.
This could be an issue if a process open a large amount of files. However, 
since we define fd as an int which can go up to 2,147,483,647 on modern 
machines, it's very unlikely that the fd could go out of bouds.

2. In our design, each process has a list of file_info structs. 
The advantage is to utilizes existing list functions so it's easier to 
implement. 
But this requires the program to go through the list to find the file 
mathing the pid, which could be slow if a process has a large amount of 
opened, unclosed files.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change the mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
