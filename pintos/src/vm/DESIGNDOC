       	    +---------------------------+
		    |		CS 140				|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT		|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Bowen Tan tanbowen@stanford.edu
Ziyue Xiao ziyuex@stanford.edu
Jizhen Wang jzwang43@stanford.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct thread
{
  struct hash page_table;      ==> Supplementary page table
}

enum page_status
{
  DEFAULT,
  FILE, 
  SWAP
};

The enumeration above is used to indicate the source where to 
load the page from

struct sup_page_table_entry
{
  void *user_vaddr;					      ==> User virtual address
  enum page_status source; 		  	==> Where to load the page from
  bool writable;					        ==> If page is writable
  struct frame_table_entry *fte;	==> Store frame info
  struct hash_elem elem;			    ==> page table entry element

  /* members to locate swap */
  bool pinned;						        ==> If the page is "pinning" 
                                      in the frame
  size_t swap_index;				      ==> Record swap index

  /* members to locate mmap file */
  struct file *file;		          ==> Store the file to load
  int file_offset;			          ==> Offset of the file 
  uint32_t read_bytes;	         	==> Number of bytes to 
                                      read from file to frame
  uint32_t zero_bytes;		        ==> bytes to align page size
};

The struct above is the supplamentary page table implementation. 
Please findthe details of member above.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

1. If the frame containing the data for a page is in the memory, the 
access is normal without page fault and follows the original implemntation 
of pintos.

2. If a page fault happens, With the given page, we will search it in the 
supplamentary page table, if there is a match, we will allocate a frame and 
load the page frome the source specified in the supplamentary page table.

3. If load_page was able to load the page, this means the data was loaded to 
a frame and mapped to this page. we can allow the process to proceed.

4. If no match in sup page table, we check if memory is valid for stack growth. 
If true, we grow the stack and the excution proceeds, if not then it is an 
invalid access.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid this issue by only accessing data using user virtual address.

When the program tries to find a frame to evict, it only uses the 
process's page directory and user address for accessed bits. 
Thus we are not modifying the kernel pagedir.

For dirty bits, we also only use the process's page directory 
and user address. This happens when we write file back to disk 
when the bits are dirty.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We have declared a lock named "f_lock" in the "frame_table.c", as well as 
2 functions to acquire and release this lock. So whenever a thread requires
frame allocation, it'll try to acquire the lock. If the lock is free, then
the frame allocation can be performed. Otherwise, this thread has to wait
for other thread releasing the lock.


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We initially thought about using list but we realized there can be many queries 
to find an element in the supplamentary page table, it would be to costly to 
search through a list.

So we choosed hashmap to implement the supplamentary page map because it's
fast and also easy to use. It allows O(1) for finding a entry. Since user 
addresses are unique so we use those as the hash for each supplamentary 
page entry. 


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* A list of frame_table_entry as the frame table. */
static struct list frame_table;

/* only one thread is allowed to interact with frame table */
static struct lock f_lock;

struct frame_table_entry
{
  void *frame;							          ==> the frame itself
  struct thread *owner;					      ==> the thread owns this frame
  struct sup_page_table_entry *spte;	==> store the sup page table info
  struct list_elem elem;				      ==> list element of frame table 
};

The struct above is the impelementation of frame table. The details of 
each member are above as well

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

To evict frames, we implement the clock algorithm which supports 
second chance. We go through the frame table and check its accessed bit.
If the bit is 1, set to 0 and skip, if 0 evict. This is the same as what'same
described in vm_os slides, page 15/47. We also use pinning to skip pinned 
frames to avoid potential sync issues.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

First of all, pagedir_clear_page needs to be called on P's pagedir and the user
virtual address to indicate this data is not in memory and needs to be loaded.

For Q, we will locate its sup page table entry, and set the fte field to NULL.
FTE field refers to the frame that was mapped to the user vaddr. If it's NULL,
the program will know that this fram is no longer held by Q. 

When installing the page for P, the frame table entry also gets updated so the 
spte field is set to the new sup page table entry, so we know this frame is 
mapped to P's page instead of Q's.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When page fault happens, we first check if the address has been 
recorded in the supplementary page table, if so, we load pages from
swap or filesystem. If not, we need to check if the address is truely 
valid. That means, if the person who tries to access the address is
the user, the address must be a valid stack address, which must be 
non-NULL, above 0x08048000, below PHYS_BASE, and above esp - 32. 
After passing the validity check, we are allowed to grow the stack.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We use a single lock f_lock for the vm system. This makes synchronization
relatively easy. We just need to acquire the lock is any modification to vm 
needs to happen. This includes access to frame table or page table.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

In our implementation, evict frame only happens when the process hold the
lock to the vm system. And if P tries to load the page back, it also needs
the lock. So only one can happen, thus the race is prevented.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We used pinning. For the load_page function, before we start loading the
data from either file or swap, we set the current sup_page_table_entry to
pinned, and our LRU eviction will skip pinned entries. In this case, we
cannot evict the frame while it is still being read in. We only unpin the 
frame after the load finishes.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring in the pages. The behavior is very similar 
to in user programs as described above. We first attempt to load in
the page. If it fails then we see if we need to extend the stack.

Since we only use user vaddr to access data, we can know the fault is on 
user virtual address. The diffrence is if page fault is truly invalid access 
and is cause by user, we exit the process, if it is caused by kernel, we need
to signal and error to the kernel.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We used a single lock to make the synchronization easy. But we think it still
allows for a lof of parallelism. If there is enough memory and no page fault happens, 
it's very rarely for the lock to be acquired and there is no impact on parallelism.
In modern systems the ram is much larger than pintos and should rarely run out.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
{
  struct list mmapped_file_list;  /* list of memory mapped files */
}

struct mmapped_file_entry
{
  int mapid;              /* Unique id for a mapped file in vm */
  void *user_vaddr;       /* Start address for the mapped memory */
  struct file *file;      /* File in disk */
  struct list_elem elem;  /* List element for  mmapped_file_list */
  size_t file_size;       /* size of file mapped into vm */
};

struct sup_page_table_entry
{
  struct file *file;      /* a file to be mapped */
  int file_offset;        /* offset in the file */
  uint32_t read_bytes;    /* bytes in the page mapped by the file */
  uint32_t zero_bytes;    /* bytes to align page size*/
}

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Each process would keep a list of files mapped into virtual memory. 
The list is initialized when starting a new process, and only when 
mmap is called and succeeds, a new list element would be added to 
the mapped file list. And the page is allocated lazily in mmap, 
that is, we record the virtual address in supplementary page table 
but don't assign a frame to it. When the user tries to access that 
address space, it would cause page fault, at that time we assign a
frame to the page and map the fileinto virtual memory. And when 
ummap is called, or when the process exits, we first check if the 
pages mapped from file are dirty and write the page bits back to 
file. Then we go ahead, delete the file from mapped file list and 
free  that page.  

When page fault happend, we first check if have that fault address 
stored in the supplementary page table, if so, we load pages from swap, 
excutable file or memory mapped file. And the major difference between
swap pages and mapped files is that they load pages from swap or file
system respectively. Similarly, during eviction process, they write 
to global swap and filesys respectively. 

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

After checking the file to be mapped is valid, we get its size 
file_size. Given the user virtual address uvaddr, we first need 
to make sure the virtual address space [addr,addr + file_size] is
valid stack address, and they are not occupied by other pages in
original Pintos page table or supplamentary page table.Only when
the memory is valid stack address and unoccupied, we lazily 
allocate pages for the mapped file. 

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

In struct sup_page_table_entry, we use members "source" and "writable"
to keep track of the status of page, indicating whether it comes 
from an excutable file, mapped file or swap. When we allocate pages 
lazily, the page source is DEAFULT, and we modify it to MMAP in mmap 
systemcall, to FILE if the page is an exctable file to be loaded, and
to SWAP when we evict the page to swap. The major difference is 
when we load pages, we call load_page_from_file() for files. By keeping 
track of these information, we can share much of the code, and it 
makes our code clearer.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
